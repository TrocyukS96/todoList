{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","features/CommonActions/App.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","features/login/auth-reducer.ts","app/app-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","app/store.ts","features/login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","appActions","setAppStatus","createAction","setAppError","fetchTodolistsTC","createAsyncThunk","param","a","dispatch","rejectWithValue","status","res","todolists","removeTodolistTC","changeTodolistEntityStatusAC","addTodolistTC","todolist","item","changeTodolistTitleTC","slice","createSlice","name","initialState","reducers","changeTodolistTitleAC","state","action","index","findIndex","tl","payload","changeTodolistFilterAC","filter","entityStatus","extraReducers","builder","addCase","fulfilled","map","splice","unshift","todolistsReducer","reducer","actions","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","error","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","handleAsyncServerAppError","thunkAPI","showError","messages","length","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","fetchTasks","tasks","items","addTask","resultCode","updateTask","getState","find","t","apiModel","deadline","description","priority","startDate","asyncActions","updateTaskAC","forEach","todoListId","tasksReducer","Todolist","demo","useDispatch","useEffect","thunk","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","isLogin","useSelector","auth","isLoggedIn","removeTaskFn","addTaskFn","changeStatus","newTitle","addTodolist","Grid","container","padding","spacing","allTodolistTasks","Paper","to","login","LogOut","setIsLoggedInAC","authReducer","initializeAppTC","appReducer","isInitialized","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","match","setFieldError","field","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","top","transform","right","border","LinearProgress","Container","fixed","path","element","textAlign","CircularProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e793fbbf.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3d91ee0a-a2e5-4c47-9eef-21fe45b3ba2b'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(data:LoginParamsType) {\r\n        return instance.post<LoginParamsType,AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', data)\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<AuthMeType>>('auth/me');\r\n    },\r\n    logOut(){\r\n        return instance.delete<ResponseType>(`auth/login`);\r\n    }\r\n}\r\n\r\n\r\n\r\n// types\r\ntype AuthMeType = {\r\n    id:number\r\n    email:string\r\n    password:string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?:string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = {field:string; error:string}\r\nexport type ResponseType<D = {}> =  {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    // fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {createAction} from '@reduxjs/toolkit'\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\n\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>('appActions/setAppStatus')\r\nconst setAppError = createAction<{error: string | null}>('appActions/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {RequestStatusType,} from '../../app/app-reducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {appActions} from \"../CommonActions/App\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst {setAppStatus} = appActions\r\n\r\n//thunks\r\nexport const fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolistsTC', async (param, {\r\n    dispatch,\r\n    rejectWithValue\r\n\r\n}) => {\r\n    debugger\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await todolistsAPI.getTodolists()\r\n    try {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (e) {\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\nexport const removeTodolistTC = createAsyncThunk('todolists/removeTodolistTC', async (todolistId: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    const res = await todolistsAPI.deleteTodolist(todolistId)\r\n    try {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {id: todolistId}\r\n    } catch (e) {\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\nexport const addTodolistTC = createAsyncThunk('todolists/addTodolistTC', async (title: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await todolistsAPI.createTodolist(title)\r\n    try {\r\n\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n        return{todolist: res.data.data.item}\r\n    } catch (e) {\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\nexport const changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitleTC', async (param:{id: string, title: string},{dispatch, rejectWithValue}) => {\r\n        await todolistsAPI.updateTodolist(param.id, param.title)\r\n       return {id:param.id, title:param.title}\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n//             return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            // return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            // return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n    }, extraReducers: builder => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        })\r\n    }\r\n})\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const {\r\n    changeTodolistTitleAC,\r\n    changeTodolistEntityStatusAC,\r\n    changeTodolistFilterAC\r\n} = slice.actions\r\n//types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {appActions} from '../features/CommonActions/App'\r\nimport {Dispatch} from 'redux'\r\nimport {AxiosError} from 'axios'\r\nimport {ResponseType} from \"../api/types\";\r\n\r\n\r\n// original type:\r\n// BaseThunkAPI<S, E, D extends Dispatch = Dispatch, RejectedValue = undefined>\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n","import {\r\n    addTodolistTC,\r\n    fetchTodolistsTC, removeTodolistTC,\r\n} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {createAsyncThunk, createSlice, isRejectedWithValue, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {appActions} from \"../CommonActions/App\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\nconst {setAppStatus} = appActions\r\n\r\n//thunks\r\nexport const fetchTasks =createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI)  => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await todolistsAPI.getTasks(todolistId)\r\n            const tasks = res.data.items\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {tasks, todolistId}\r\n            //возвращаем всегда объект  который будет являться payload\r\n})\r\n//мета-данные - данные, которые приходят в санку через аргументы\r\nexport const removeTask = createAsyncThunk('tasks/removeTask',(param:{taskId: string, todolistId: string}, thunkAPI)=>{\r\n    return todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        .then(res => ({taskId:param.taskId, todolistId:param.todolistId}))\r\n    //в этом случае санка обязана что-то возвращать, в данном случае - то, что зарезолвит промис\r\n})\r\nexport const addTask = createAsyncThunk('tasks/addTaskTC',async (param:{title: string, todolistId: string}, thunkAPI)=>{\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return res.data.data.item\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    }catch (error:any) {\r\n        //Todo - изменить any type\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string },\r\n                                                                      thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error:any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        // addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n        //     state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        // },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        //позваоляет написать обработчик action, не создавая actionCreator, либо если action из другого редюсера\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase(removeTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(addTask.fulfilled, (state, action)=>{\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n    }\r\n})\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport const {updateTaskAC} = slice.actions\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof updateTaskAC>\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | any>\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasks } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasks(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {asyncActions, TasksStateType} from \"./tasks-reducer\"\r\n\r\nconst {removeTask,addTask,updateTask,fetchTasks} = asyncActions\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    let isLogin = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const removeTaskFn = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTask({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTaskFn = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTask({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTask({taskId:id,model:{status},todolistId:todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTask({taskId:id,model:{title: newTitle},todolistId:todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        // @ts-ignore\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({id, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLogin) {\r\n            debugger\r\n            return;\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n\r\n    if (!isLogin) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTaskFn}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTaskFn}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {authAPI, FieldErrorType, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport { appActions } from \"../CommonActions/App\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType,\r\n    { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param);\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (err:any) {\r\n        //Todo - изменить any type\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n})\r\nexport const LogOut = createAsyncThunk('auth/LogOut', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logOut()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (err: any) {\r\n        //Todo - изменить any type\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state) => {state.isLoggedIn = true})\r\n        builder.addCase(LogOut.fulfilled, (state) => {state.isLoggedIn = false})\r\n    }\r\n})\r\nexport const authReducer = slice.reducer\r\n\r\nexport const {setIsLoggedInAC} = slice.actions\r\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/login/auth-reducer\";\r\nimport {appActions} from \"../features/CommonActions/App\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const initializeAppTC = createAsyncThunk('auth/initializeApp', async (param, {dispatch,rejectWithValue}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({value: true}))\r\n            // тут выполняется логика для fulfilled\r\n    }\r\n})\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeAppTC.fulfilled, (state, action) => {\r\n            debugger\r\n            state.isInitialized = true\r\n        })\r\n            .addCase(appActions.setAppError,(state,action)=>{\r\n                state.error = action.payload.error\r\n            })\r\n            .addCase(appActions.setAppStatus,(state,action)=>{\r\n                state.status = action.payload.status\r\n        })\r\n    }\r\n})\r\nexport const appReducer = slice.reducer\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport {appActions} from \"../../features/CommonActions/App\";\r\n\r\nconst {setAppError} = appActions\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError({error:null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth:authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n//store for slice\r\nexport const store = configureStore({\r\n    reducer:rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\nexport type AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = ()=>useDispatch<AppDispatchType>()","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikHelpers, useFormik} from 'formik';\r\nimport {useSelector} from \"react-redux\";\r\nimport {login} from \"./auth-reducer\";\r\nimport {AppRootStateType, useAppDispatch} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport const Login = () => {\r\n    debugger\r\n    let isLogin = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useAppDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (values.password.length >= 20 && values.password.length < 3) {\r\n                errors.password = 'password should consist 5 or less symbols '\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(login(values))\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                } else {\r\n\r\n                }\r\n            }\r\n\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLogin) {\r\n        return <Navigate to='/'/>\r\n    }\r\n\r\n    console.log(isLogin)\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? (\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                        ) : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? (\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                        ) : null}\r\n                        <FormControlLabel label={'Remember me'} control={\r\n                            <Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />\r\n                        }/>\r\n                        <Button type=\"submit\" variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/login/Login\";\r\nimport { LogOut} from \"../features/login/auth-reducer\";\r\nimport CircularProgress from '@mui/material/CircularProgress/CircularProgress'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    let isLogin = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n\r\n    useEffect(() => {\r\n        if(!demo){\r\n            dispatch(initializeAppTC())\r\n        }\r\n    }, [])\r\n\r\n    const logOutHandler = ()=>{\r\n        dispatch(LogOut())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        console.log('preloader app')\r\n        return <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isInitialized && <Button onClick={logOutHandler} color=\"inherit\" style={{\r\n                        position:'absolute',\r\n                        top:'50%',\r\n                        transform:'translateY(-50%)',\r\n                        right:'20px',\r\n                        border:'2px solid white'\r\n                    }}>Log Out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}