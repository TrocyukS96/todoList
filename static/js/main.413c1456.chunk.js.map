{"version":3,"sources":["api/todo-lists-service.ts","reportWebVitals.ts","store/app/selectors.ts","store/app/actions.ts","store/auth/actions.ts","store/app/app-slice.ts","store/app/index.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","store/auth/selectors.ts","utils/error-utils.ts","store/auth/auth-slice.ts","utils/redux-utils.ts","features/Auth/Login.tsx","store/auth/index.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","store/todolist/actions.ts","store/todolist/todolists-slice.ts","store/todolist/index.ts","store/tasks/tasks-slice.ts","features/TodolistsList/Todolist/Todolist.tsx","store/tasks/index.ts","features/TodolistsList/TodoListsList.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","selectStatus","state","app","status","selectIsInitialized","isInitialized","setAppStatus","createAction","setAppError","instance","axios","create","baseURL","withCredentials","headers","todoListsService","get","title","post","id","put","todolistId","taskId","delete","model","authAPI","data","setIsLoggedIn","initializeApp","createAsyncThunk","param","a","dispatch","resultCode","value","slice","createSlice","name","initialState","error","reducers","extraReducers","builder","addCase","fulfilled","action","payload","asyncActions","appActions","actions","appReducer","reducer","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","useSelector","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","selectIsLoggedIn","auth","isLoggedIn","handleAsyncServerAppError","thunkAPI","showError","messages","length","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","login","res","logOut","useAppDispatch","useActions","useMemo","bindActionCreators","Login","isLogin","authSelectors","authActions","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","match","setFieldError","field","resetForm","to","console","log","Grid","container","justifyContent","item","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","defaultValue","getFieldProps","touched","style","color","type","FormControlLabel","control","Checkbox","Button","authReducer","AddItemForm","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Delete","changeTodolistFilter","changeTodolistEntityStatus","fetchTodoLists","todoLists","removeTodolist","addTodolist","todolist","changeTodolistTitle","map","tl","filter","entityStatus","index","findIndex","splice","unshift","todoListsActions","todoListsReducer","fetchTasks","tasks","items","addTask","updateTask","getState","find","t","apiModel","deadline","description","priority","startDate","forEach","todoListId","Todolist","demo","useEffect","thunk","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","paddingTop","tasksActions","tasksReducer","TodoListsList","removeTaskAsync","addTaskAsync","updateTaskAsync","changeTaskTitleAsync","newTitle","changeTodolistFilterAsync","removeTodolistAsync","changeTodolistTitleAsync","addTodolistAsync","padding","spacing","allTodolistTasks","Paper","App","appSelectors","navigate","useNavigate","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","top","transform","right","border","LinearProgress","Container","fixed","path","element","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.413c1456.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3d91ee0a-a2e5-4c47-9eef-21fe45b3ba2b',\r\n        // \"Access-Control-Allow-Headers\":\"*\",\r\n        // \"Access-Control-Allow-Origin\":\"*\",\r\n        // 'Content-Type': 'application/json',\r\n        // \"Access-Control-Allow-Methods\":\"*\",\r\n        // \"Access-Control-Allow-Credentials\":\"true\",\r\n    }\r\n})\r\n\r\n// api\r\nexport const todoListsService = {\r\n    getTodoLists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(data:LoginParamsType) {\r\n        return instance.post<LoginParamsType,AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', data)\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<AuthMeType>>('auth/me');\r\n    },\r\n    logOut(){\r\n        return instance.delete<ResponseType>(`auth/login`);\r\n    }\r\n}\r\n\r\n\r\n\r\n// types\r\ntype AuthMeType = {\r\n    id:number\r\n    email:string\r\n    password:string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?:string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = {field:string; error:string}\r\nexport type ResponseType<D = {}> =  {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    // fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {AppRootStateType} from \"../../features/Application/CommonActions/types\";\r\nimport {RequestStatusType} from \"./index\";\r\n\r\n\r\nexport const selectStatus = (state:AppRootStateType)=> state.app.status\r\n\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized\r\n","import {createAction} from \"@reduxjs/toolkit\";\r\nimport {RequestStatusType} from \"./index\";\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>('appActions/setAppStatus')\r\nconst setAppError = createAction<{error: string | null}>('appActions/setAppError')\r\n\r\nexport {\r\n    setAppStatus,\r\n    setAppError\r\n}\r\n","import {createAction} from \"@reduxjs/toolkit\";\r\n\r\nconst setIsLoggedIn = createAction<{value:boolean}>(\r\n    'authActions/setIsLoggedIn',\r\n)\r\n\r\nexport {\r\n    setIsLoggedIn\r\n}","import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {authAPI} from \"../../api/todo-lists-service\";\r\nimport {setIsLoggedIn} from \"../auth/actions\";\r\nimport {setAppError, setAppStatus} from \"./actions\";\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst initializeApp = createAsyncThunk('auth/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedIn({value: true}))\r\n        // тут выполняется логика для fulfilled\r\n    }\r\n})\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n            .addCase(setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n    }\r\n})\r\n\r\n\r\nexport const asyncActions = {initializeApp}\r\n\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n","import * as appSelectors from './selectors';\r\nimport * as actions from './actions';\r\nimport {asyncActions, slice , RequestStatusType as T1} from \"./app-slice\";\r\n\r\nconst appActions ={\r\n    ...asyncActions,\r\n    ...slice.actions,\r\n    ...actions\r\n}\r\n\r\nexport type RequestStatusType = T1\r\n\r\nconst appReducer = slice.reducer\r\n\r\nexport {\r\n    appActions,\r\n    appSelectors,\r\n    appReducer\r\n\r\n}","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {AppRootStateType} from \"../../features/Application/CommonActions/types\";\r\nimport {appActions} from \"../../store/app\";\r\n\r\nconst {setAppError} = appActions\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError({error:null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import {AppRootStateType} from \"../../features/Application/CommonActions/types\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType):boolean => state.auth.isLoggedIn\r\n\r\n","import {AxiosError} from 'axios'\r\nimport {ResponseType} from \"../api/types\";\r\nimport {appActions} from \"../store/app\";\r\n\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nconst {setAppStatus,setAppError} = appActions\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n","import {authAPI, FieldErrorType, LoginParamsType} from \"../../api/todo-lists-service\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/error-utils\";\r\nimport {setIsLoggedIn} from \"./actions\";\r\nimport {setAppStatus} from \"../app/actions\";\r\n\r\n\r\n\r\nconst login = createAsyncThunk<undefined, LoginParamsType,\r\n    { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param);\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (err:any) {\r\n        //Todo - изменить any type\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n})\r\n const logOut = createAsyncThunk('auth/LogOut', async ({}, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logOut()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (err: any) {\r\n        //Todo - изменить any type\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {login,logOut}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state) => {state.isLoggedIn = true})\r\n        builder.addCase(logOut.fulfilled, (state) => {state.isLoggedIn = false})\r\n        builder.addCase(setIsLoggedIn, (state,action) => {state.isLoggedIn = action.payload.value})\r\n    }\r\n})\r\n","import {useDispatch} from 'react-redux'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\nimport {AppDispatchType} from \"../features/Application/CommonActions/types\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikHelpers, useFormik} from 'formik';\r\nimport {useSelector} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {authActions, authSelectors} from \"../../store/auth\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport const Login = () => {\r\n    let isLogin = useSelector(authSelectors.selectIsLoggedIn)\r\n    const dispatch = useAppDispatch()\r\n    const {login} = useActions(authActions)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (values.password.length >= 20 && values.password.length < 3) {\r\n                errors.password = 'password should consist 5 or less symbols '\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(login(values))\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                } else {\r\n                }\r\n            }\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLogin) {\r\n        return <Navigate to='/'/>\r\n    }\r\n\r\n    console.log(isLogin)\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            defaultValue={'trotzuk.stanislav@gmail.com'}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? (\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                        ) : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            defaultValue={'resamstas'}\r\n                            {...formik.getFieldProps('password')}\r\n\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? (\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                        ) : null}\r\n                        <FormControlLabel label={'Remember me'} control={\r\n                            <Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />\r\n                        }/>\r\n                        <Button type=\"submit\" variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from './selectors';\r\nimport * as actions from './actions'\r\n\r\nimport {asyncActions,slice} from './auth-slice';\r\nimport { Login } from '../../features/Auth/Login';\r\n\r\nconst authActions ={\r\n    ...actions,\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n// Обьеденяем все actions в один объект\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n}","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todo-lists-service'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {createAction} from \"@reduxjs/toolkit\";\r\nimport {FilterValuesType} from \"./todolists-slice\";\r\nimport {RequestStatusType} from \"../app\";\r\n\r\nconst changeTodolistFilter = createAction<{ id: string, filter: FilterValuesType }>('todoListsActions/changeTodolistFilter')\r\nconst changeTodolistEntityStatus = createAction<{ id: string, status: RequestStatusType }>('todoListsActions/changeTodolistEntityStatus')\r\n\r\nexport {\r\n    changeTodolistFilter,\r\n    changeTodolistEntityStatus\r\n}","import {todoListsService, TodolistType} from '../../api/todo-lists-service'\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {RequestStatusType} from \"../app\";\r\nimport {ThunkError} from \"../../features/Application/CommonActions/types\";\r\nimport {handleAsyncServerNetworkError} from \"../../utils/error-utils\";\r\nimport {setAppStatus} from '../app/actions';\r\nimport {changeTodolistEntityStatus, changeTodolistFilter} from \"./actions\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n\r\n//thunks\r\nconst fetchTodoLists = createAsyncThunk<{ todoLists: TodolistType[] }, undefined, ThunkError>('todolists/fetchTodolistsTC', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await todoListsService.getTodoLists()\r\n    try {\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todoLists: res.data}\r\n    } catch (error: any) {\r\n        //Todo - fix any type\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\n\r\nconst removeTodolist = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    thunkAPI.dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}))\r\n    try {\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {id: todolistId}\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const addTodolist = createAsyncThunk('todolists/addTodolistTC', async (title: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await todoListsService.createTodolist(title)\r\n    try {\r\n\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolist: res.data.data.item}\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const changeTodolistTitle = createAsyncThunk('todolists/changeTodolistTitleTC', async (param: { id: string, title: string }, {\r\n\r\n}) => {\r\n    await todoListsService.updateTodolist(param.id, param.title)\r\n    return {id: param.id, title: param.title}\r\n})\r\n\r\nexport const asyncActions = {addTodolist, changeTodolistTitle, removeTodolist, fetchTodoLists}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todoLists',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodoLists.fulfilled, (state, action) => {\r\n            return action.payload.todoLists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTodolist.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        })\r\n        builder.addCase(changeTodolistEntityStatus, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        })\r\n        builder.addCase(changeTodolistFilter, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        })\r\n    }\r\n})\r\n\r\n//types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n","import {asyncActions, slice} from './todolists-slice';\r\n\r\nconst todoListsActions ={\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n// Обьеденяем все actions в один объект\r\n\r\nconst todoListsReducer = slice.reducer\r\n\r\nexport {\r\n    todoListsActions,\r\n    todoListsReducer\r\n}","import {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todoListsService,\r\n    UpdateTaskModelType\r\n} from '../../api/todo-lists-service'\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AppRootStateType} from \"../../features/Application/CommonActions/types\";\r\nimport {todoListsActions} from \"../todolist\";\r\nimport {setAppStatus} from \"../app/actions\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n//thunks\r\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await todoListsService.getTasks(todolistId)\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {tasks, todolistId}\r\n    //возвращаем всегда объект  который будет являться payload\r\n})\r\n//мета-данные - данные, которые приходят в санку через аргументы\r\nexport const removeTask = createAsyncThunk('tasks/removeTask', (param: { taskId: string, todolistId: string }) => {\r\n    return todoListsService.deleteTask(param.todolistId, param.taskId)\r\n        .then(() => ({taskId: param.taskId, todolistId: param.todolistId}))\r\n    //в этом случае санка обязана что-то возвращать, в данном случае - то, что зарезолвит промис\r\n})\r\nexport const addTask = createAsyncThunk('tasks/addTaskTC', async (param: { title: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todoListsService.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return res.data.data.item\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error: any) {\r\n        //Todo - изменить any type\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }, thunkAPI) => {\r\n    debugger\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n\r\n    const res = await todoListsService.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\nexport const {addTodolist, removeTodolist, fetchTodoLists} = todoListsActions\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        //позваоляет написать обработчик action, не создавая actionCreator, либо если action из другого редюсера\r\n        builder.addCase(addTodolist.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(fetchTodoLists.fulfilled, (state, action) => {\r\n            action.payload.todoLists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        });\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase(removeTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(addTask.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n    }\r\n})\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todo-lists-service'\r\nimport { FilterValuesType, TodolistDomainType } from '../../../store/todolist/todolists-slice'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasks } from '../../../store/tasks/tasks-slice'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasks(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {asyncActions, slice} from './tasks-slice';\r\n\r\nconst tasksActions ={\r\n    ...asyncActions,\r\n    ...slice.actions,\r\n}\r\n// Обьеденяем все actions в один объект\r\n\r\nconst tasksReducer = slice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    tasksReducer\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {FilterValuesType, TodolistDomainType} from '../../store/todolist/todolists-slice'\r\nimport {TaskStatuses} from '../../api/todo-lists-service'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {TasksStateType} from \"../../store/tasks/tasks-slice\"\r\nimport {AppRootStateType} from \"../Application/CommonActions/types\";\r\nimport {todoListsActions} from \"../../store/todolist\";\r\nimport {tasksActions} from \"../../store/tasks\";\r\nimport {changeTodolistFilter} from \"../../store/todolist/actions\";\r\n\r\nconst {removeTask, addTask,updateTask} = tasksActions\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoListsList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    let isLogin = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const {addTodolist,removeTodolist,changeTodolistTitle,fetchTodoLists} = todoListsActions\r\n\r\n    const removeTaskAsync = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTask({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTaskAsync = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTask({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const updateTaskAsync = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        debugger\r\n        const thunk = updateTask({taskId: id, model: {status}, todolistId: todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitleAsync = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTask({taskId: id, model: {title: newTitle}, todolistId: todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistFilterAsync = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilter({id:todolistId, filter:value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolistAsync = useCallback(function (id: string) {\r\n        const thunk = removeTodolist(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitleAsync = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitle({id, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolistAsync = useCallback((title: string) => {\r\n        const thunk = addTodolist(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLogin) {\r\n            debugger\r\n            return;\r\n        }\r\n        dispatch(fetchTodoLists())\r\n    }, [])\r\n\r\n\r\n    if (!isLogin) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolistAsync}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todoLists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTaskAsync}\r\n                                changeFilter={changeTodolistFilterAsync}\r\n                                addTask={addTaskAsync}\r\n                                changeTaskStatus={updateTaskAsync}\r\n                                removeTodolist={removeTodolistAsync}\r\n                                changeTaskTitle={changeTaskTitleAsync}\r\n                                changeTodolistTitle={changeTodolistTitleAsync}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Route, Routes, useNavigate} from \"react-router-dom\";\r\n\r\nimport CircularProgress from '@mui/material/CircularProgress/CircularProgress'\r\nimport {authActions, Login} from \"../store/auth\";\r\nimport {useActions} from \"../utils/redux-utils\";\r\nimport {appActions, appSelectors} from \"../store/app\";\r\nimport {TodoListsList} from \"../features/TodolistsList/TodoListsList\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nconst {initializeApp} = appActions\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector(appSelectors.selectStatus)\r\n    const isInitialized = useSelector(appSelectors.selectIsInitialized)\r\n    const {logOut} = useActions(authActions)\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if(!demo){\r\n            dispatch(initializeApp())\r\n        }\r\n        debugger\r\n        if(isInitialized){\r\n            navigate('/')\r\n        }\r\n    }, [demo,dispatch])\r\n\r\n    const logOutHandler = ()=>{\r\n        dispatch(logOut())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        console.log('preloader app')\r\n        return <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isInitialized && <Button onClick={logOutHandler} color=\"inherit\" style={{\r\n                        position:'absolute',\r\n                        top:'50%',\r\n                        transform:'translateY(-50%)',\r\n                        right:'20px',\r\n                        border:'2px solid white'\r\n                    }}>Log Out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodoListsList demo={demo}/>}/>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {authReducer} from '../store/auth'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\nimport {appReducer} from \"../store/app\";\r\nimport {tasksReducer} from \"../store/tasks\";\r\nimport {todoListsReducer} from \"../store/todolist\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}